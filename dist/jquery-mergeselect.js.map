{"version":3,"names":[],"mappings":"","sources":["jquery-mergeselect.js"],"sourcesContent":["'use strict';\n// Based by on https://github.com/mgibbs189/fSelect\n// https://github.com/umdjs/umd\n\n// Uses CommonJS, AMD or browser globals to create a jQuery plugin.\n\n// Similar to jqueryPlugin.js but also tries to\n// work in a CommonJS environment.\n\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['jquery'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        // Node/CommonJS\n        module.exports = factory(require('jquery'));\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n}(function ($) {\n    var pluginName = 'mergeSelect';\n    var classPrefix = '.' + pluginName + ' ';\n\n\n    var uid = function (i) {\n        return function () {\n            return pluginName + '-' + (++i);\n        };\n    }(0);\n\n    var labelTextFunction = function () {\n        var settings = this.settings;\n        var labelText = [];\n\n        this.$wrap.find('.ms-option.ms-selected').each(function (i, el) {\n            labelText.push($(el).find('.ms-option-label').text());\n        });\n\n        if (labelText.length < 1) {\n            labelText = settings.placeholder;\n        }\n        else if (labelText.length > settings.numDisplayed) {\n            var overflowText = settings.overflowText;\n            if (typeof overflowText == 'function') {\n                overflowText = overflowText.apply(this, [labelText])\n            }\n            labelText = overflowText.replace('{n}', labelText.length);\n        }\n        else {\n            labelText = labelText.join(', ');\n        }\n        return labelText\n    };\n\n    var defaults = {\n        selects: null,\n        placeholder: 'Select some options',\n        numDisplayed: 3,\n        overflowText: '{n} selected',\n        labelText: labelTextFunction\n    };\n\n    var classNameSuffix = '.ms-';\n\n    // TODO\n    var classNames = {\n        wrap: 'wrap',\n        option: 'option',\n        selected: 'selected',\n        label: 'label',\n        labelWrap: 'label-wrap',\n        optionLabel: 'option-label',\n        dropdown: 'dropdown',\n        hidden: 'hidden',\n        arrow: 'arrow',\n        optgroup: 'optgroup',\n        optgroupLabel: 'optgroup-label',\n        search: 'search'\n    };\n\n    /*\n     Constructor\n     */\n    var mergeSelect = function (el, settings) {\n        this.el = el;\n        this.$el = $(el);\n        this.settings = settings;\n        this.selects = settings.selects;\n        this.$selects = $(this.selects);\n        this.selects_map = {};\n        var selects_map = this.selects_map;\n\n        this.$selects.each(function (index, value) {\n            if (!value.id) {\n                value.id = uid();\n            }\n            selects_map[value.id] = $(value);\n        });\n\n        this.create();\n    };\n\n    mergeSelect.prototype = {\n        create: function () {\n            // TODO добавить возможность объединения разных типов\n            var multiple = this.$selects.is('[multiple]') ? ' multiple' : '';\n            this.$el.append('<div class=\"' + pluginName + '\"></div>');\n            var $container = this.$el.find('.' + pluginName);\n\n            $container.append('<div class=\"ms-wrap' + multiple + '\"></div>');\n\n            var $wrap = $container.find('.ms-wrap');\n\n            $wrap.append(\n                '<div class=\"ms-label-wrap\">'\n                + '<div class=\"ms-label\">'\n                + this.settings.placeholder\n                + '</div>'\n                + '<span class=\"ms-arrow\"></span></div>'\n            );\n\n            $wrap.append('<div class=\"ms-dropdown hidden\">'\n                + '<div class=\"ms-options\">'\n                + '</div></div>');\n\n            //$wrap.addClass('hidden');\n\n            this.$container = $container;\n\n            this.$wrap = $wrap;\n\n            this.reload();\n        },\n        reload: function () {\n            var self = this;\n            if (this.settings.showSearch) {\n                var search = '<div class=\"ms-search\"><input type=\"search\" placeholder=\"' + this.settings.searchText + '\" /></div>';\n                this.$wrap.find('.ms-dropdown').prepend(search);\n            }\n\n            var choices = '';\n            this.$selects.each(function (index, value) {\n                    choices += self.buildOptions($(value))\n                }\n            ).get();\n            this.$wrap.find('.ms-options').html(choices);\n            this.reloadDropdownLabel();\n        },\n\n        buildOptions: function ($element) {\n            var $this = this;\n            var choices = '';\n            var $select = $element.closest('select');\n            var has_multiple = $select.is('[multiple]');\n\n            if ($element.tagName == 'select' || $element.data('label')) {\n                // TODO formgroup\n                choices += '<div class=\"ms-optgroup\">';\n                choices += '<div class=\"ms-optgroup-label\">' + $element.data('label') + '</div>';\n                choices += '</div>';\n            }\n\n            $element.children().each(function (i, el) {\n                var $el = $(el);\n\n                if ('optgroup' == $el.prop('nodeName').toLowerCase()) {\n                    choices += '<div class=\"ms-optgroup\">';\n                    choices += '<div class=\"ms-optgroup-label\">' + $el.prop('label') + '</div>';\n                    choices += $this.buildOptions($el);\n                    choices += '</div>';\n                }\n                else {\n                    var selected = $el.is(':selected') ? ' selected' : '';\n                    var checked = selected ? 'checked=\"checked\"' : '';\n                    var input_type = has_multiple ? 'checkbox' : 'radio';\n\n                    choices += '<div class=\"ms-option'\n                        + selected + '\" data-value=\"'\n                        + $el.prop('value')\n                        + '\"'\n                        + 'data-select-id=\"' + $select.prop('id')\n                        + '\"><div class=\"ms-option-label\"><input type=\"' + input_type + '\"' + checked + '\"/>'\n                        + $el.html()\n                        + '</div></div>';\n                }\n            });\n\n            return choices;\n        },\n        reloadDropdownLabel: function () {\n            var labelText = this.settings.labelText.apply(this);\n            this.$wrap.find('.ms-label').html(labelText);\n\n            this.$selects.each(function (index, value) {\n                $(value).change()\n\n            });\n        }\n\n    };\n\n\n    $.fn[pluginName] = function (options) {\n\n        var settings = $.extend(defaults, options);\n\n        return this.each(function () {\n            var $container = $(this).find(classPrefix);\n            var data = $container.data(pluginName);\n\n            if (!data) {\n                data = new mergeSelect(this, settings);\n                data.$container.data(pluginName, data);\n            }\n\n            if (typeof settings == 'string') {\n                data[settings]();\n            }\n        });\n\n    };\n\n    /* Events */\n    window[pluginName] = {\n        'active': null,\n        'idx': -1\n    };\n    function setIndexes($wrap) {\n        $wrap.find('.ms-option:not(.hidden)').each(function (i, el) {\n            $(el).attr('data-index', i);\n            $wrap.find('.ms-option').removeClass('ms-hl');\n        });\n        $wrap.find('.ms-search input').focus();\n        window[pluginName].idx = -1;\n    }\n\n    function setScroll($wrap) {\n        var $container = $wrap.find('.ms-options');\n        var $selected = $wrap.find('.ms-option.ms-hl');\n\n        var itemMin = $selected.offset().top + $container.scrollTop();\n        var itemMax = itemMin + $selected.outerHeight();\n        var containerMin = $container.offset().top + $container.scrollTop();\n        var containerMax = containerMin + $container.outerHeight();\n\n        var to = null;\n        if (itemMax > containerMax) { // scroll down\n            to = $container.scrollTop() + itemMax - containerMax;\n            $container.scrollTop(to);\n        }\n        else if (itemMin < containerMin) { // scroll up\n            to = $container.scrollTop() - containerMin - itemMin;\n            $container.scrollTop(to);\n        }\n    }\n\n    $(document).on('click', classPrefix + '.ms-option', function () {\n        var $option = $(this);\n        var $wrap = $option.closest('.ms-wrap');\n\n        var $container = $wrap.closest(classPrefix);\n        var _mergeSelect = $container.data(pluginName);\n\n        var selected_map = {};\n        $.map(_mergeSelect.selects_map, function (value, key) {\n            selected_map[key] = null;\n        });\n\n\n        var hasMultiple = $wrap.hasClass('multiple');\n        /* todo mixin multiple and simple select */\n        if (!hasMultiple) {\n            /* TODO remove from only select */\n            var select_id = $option.data('select-id');\n\n            $wrap.find(\".option[data-select-id='\" + select_id + \"']\")\n                .removeClass('ms-selected')\n                .find('input').prop('checked', null)\n            ;\n\n            $option.addClass('ms-selected').find('input').prop('checked', true);\n            $wrap.find('.ms-dropdown').addClass('hidden');\n        }\n\n        if (hasMultiple) {\n            $option.toggleClass('ms-selected');\n            $option.find('input').prop('checked', $option.hasClass('ms-selected'));\n        }\n\n        $wrap.find('.ms-option.selected').each(function (i, el) {\n            var $el = $(el);\n            var selected = selected_map[$el.data('select-id')] || [];\n            selected.push($el.data('value'));\n            selected_map[$el.data('select-id')] = selected;\n        });\n\n        $.map(selected_map, function (value, key) {\n            var $select = _mergeSelect.selects_map[key];\n            $select.val(value);\n            _mergeSelect.reloadDropdownLabel();\n        });\n    });\n\n\n    $(document).on('keyup', classPrefix + '.ms-search input', function (e) {\n        if (40 == e.which) {\n            $(this).blur();\n            return;\n        }\n\n        var $wrap = $(this).closest('.ms-wrap');\n        var keywords = $(this).val();\n\n        $wrap.find('.ms-option, .ms-optgroup-label').removeClass('hidden');\n\n        if ('' != keywords) {\n            $wrap.find('.ms-option').each(function () {\n                var regex = new RegExp(keywords, 'gi');\n                if (null === $(this).find('.ms-option-label').text().match(regex)) {\n                    $(this).addClass('hidden');\n                }\n            });\n\n            $wrap.find('.ms-optgroup-label').each(function () {\n                var num_visible = $(this).closest('.ms-optgroup').find('.option:not(.hidden)').length;\n                if (num_visible < 1) {\n                    $(this).addClass('hidden');\n                }\n            });\n        }\n\n        setIndexes($wrap);\n    });\n\n    $(document).on('click', function (e) {\n        var $el = $(e.target);\n        var $wrap = $el.closest('.ms-wrap');\n\n        if (0 < $wrap.length) {\n            if ($el.hasClass('ms-label')) {\n                window[pluginName].active = $wrap;\n                var is_hidden = $wrap.find('.ms-dropdown').hasClass('hidden');\n                $('.ms-dropdown').addClass('hidden');\n\n                if (is_hidden) {\n                    $wrap.find('.ms-dropdown').removeClass('hidden');\n                }\n                else {\n                    $wrap.find('.ms-dropdown').addClass('hidden');\n                }\n\n                setIndexes($wrap);\n            }\n        }\n        else {\n            $('.ms-dropdown').addClass('hidden');\n            window[pluginName].active = null;\n        }\n    });\n\n    $(document).on('keydown', function (e) {\n        var $wrap = window[pluginName].active;\n\n        if (null === $wrap) {\n            return null;\n        }\n        else if (38 == e.which) { // up\n            e.preventDefault();\n\n            $wrap.find('.ms-option').removeClass('hl');\n\n            if (window[pluginName].idx > 0) {\n                window[pluginName].idx--;\n                $wrap.find('.ms-option[data-index=' + window[pluginName].idx + ']').addClass('hl');\n                setScroll($wrap);\n            }\n            else {\n                window[pluginName].idx = -1;\n                $wrap.find('.ms-search input').focus();\n            }\n        }\n        else if (40 == e.which) { // down\n            e.preventDefault();\n            var last_index = $wrap.find('.ms-option:last').attr('data-index');\n            if (window[pluginName].idx < parseInt(last_index)) {\n                window[pluginName].idx++;\n                $wrap.find('.ms-option').removeClass('ms-hl');\n                $wrap.find('.ms-option[data-index=' + window[pluginName].idx + ']').addClass('hl');\n                setScroll($wrap);\n            }\n        }\n        else if (32 == e.which || 13 == e.which) { // space, enter\n            $wrap.find('.ms-option.ms-hl').click();\n        }\n        else if (27 == e.which) { // esc\n            $('.ms-dropdown').addClass('ms-hidden');\n            window[pluginName].active = null;\n        }\n    });\n}));\n"],"file":"jquery-mergeselect.js","sourceRoot":"/source/"}